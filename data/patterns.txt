@Name @Description @Language @Confidence @WhatToDo @NumberOfAssociations @Associations 

@CommunityOfTrust @In high school, I went to music camp one year. During one orchestra rehearsal, my section was struggling with a particularly difficult passage. The conductor asked about it and I said “Don’t worry. We will have it tomorrow.” He said “Ok” and continued with the rehearsal. By the next day, we had indeed learned the passage. Once an organization has been established, interpersonal relationships have a significant positive or negative impact on the effectiveness of the team. It is essential that the people in a team trust each other, otherwise, it will be difficult to get anything done. Communication is essential to the smooth working of any team. For example, software developers must constantly talk to each other to coordinate interfaces, builds, and tests. If individuals do not trust each other, communication will not be smooth. If people do not trust each other, they will spend time in defensive mode. For example, if I don’t believe you will provide me a certain interface on time, I might go to great lengths to code around it, costing extra work and time. @ProjectManagementPatternLanguage @2 @Do things that explicitly demonstrate trust, so it is obvious. Managers, for example, should make it overtly obvious that they are at the side of the organization, rather than playing a central role that controls people to do what must be done. Take visible actions to give developers control over the process.  @6  @This is different from the oft-cited empowerment strategy. Empowerment is a conscious abdication of control to lower levels (see THE OPEN CLOSED PRINCIPLE OF TEAMS (6.1.4)). In a COMMUNITY OF TRUST, progress is more often made by bilateral agreement than by unilateral directions. If people feel they have a voice and have influence over decisions, they are more likely to trust those who make the decisions. By the same token, they are likely to be more responsive in carrying out responsibilities they have committed to themselves over responsibilities that have been “given” to them. In fact, you can’t give someone responsibility; you can only give someone accountability. Responsibility is taken, not given. One of the most demoralizing things a manager can do is to give accountability in the absence of responsibility.  You need trust between the customer and all team members to lay out project plans that extend from SIZE THE SCHEDULE (4.1.2) in the PROJECT MANAGEMENT PATTERN LANGUAGE (4.1). The same is true for role differentiation; giving everyone pride and individuality can contribute to trust, as in SIZE THE ORGANIZATION (4.2.2) and its subtending patterns in the PIECEMEAL GROWTH PATTERN LANGUAGE (4.2). Start building trust by starting small with FEW ROLES (5.1.2), and let this principle guide the ORGANIZATIONAL STYLE PATTERN LANGUAGE (5.1). To keep people from working defensively, one needs a team spirit; this is true ARCHITECT CONTROLS PRODUCT (5.2.3) and subtending patterns relating to PEOPLE AND CODE PATTERN LANGUAGE (5.2). COMMUNITY OF TRUST provides a foundation for many other patterns, such as UNITY OF PURPOSE (4.2.12), PATRON ROLE (4.2.15), FIRE WALLS (4.2.9), DEVELOPER CONTROLS PROCESS (4.1.17), RESPONSIBILITIES ENGAGE (5.1.14), and more. 

@UnityOfPurpose @the team is beginning to come together. Team members may come from different backgrounds and may bring many different experiences. Many projects have rocky beginnings as people struggle to work together. Often, the people have different ideas about what the final product should be. In fact, the final product may well be a pretty fuzzy concept. Yet the people must have a consistent view of the product if there is any hope of it getting done. Each person is different and has different views and opinions. They come with different backgrounds and experiences. They must learn to work together.  It is important to get off to a good start — initial impressions, good or bad, tend to be lasting. @PiecemealGrowthPatternLanguage @ 2 @ The leader of the project must instill a common vision and purpose in all the members of the team. This “leader” can be a manager, or the PATRON ROLE (4.2.15), or a customer advocate, but should be someone who holds the team’s respect and who has influence over the team’s thinking @ 7 @ SHARED CLEAR VISION (10.5.25) ([Bramble2002], p. 80) notes the importance of a clear vision in creating unity, from the point of view of writing use cases. SELF SELECTING TEAM (4.2.11) outlines how a team should come together, but that alone is insufficient to achieve UNITY OF PURPOSE. LOCK THEM UP TOGETHER (5.2.5) helps achieve unity, particularly of architecture. A GATE KEEPER (4.2.10) can help. It can help the team be more unified on what requirements to ENGAGE CUSTOMERS (4.2.6). This pattern sets up COMPENSATE SUCCESS (4.2.25): it’s much easier to compensate success when everyone knows what success means. And while UNITY OF PURPOSE is important to galvanize the team, effective

@LOCK THEM UP TOGETHER @you have an ARCHITECTURE TEAM (5.2.4) to pull together the initial structure of the project, and need to get off top dead center and move toward production @PeopleAndCodePatternLanguage @ 1 @ A team of different people must come up with a single, coherent architecture. A product needs a single architecture that is self-contained and consistent. But programmers have a (strong) tendency to work separately. Each person’s design bears that person’s unique signature; many people working on separate parts of an architecture will produce parts that do not necessarily work well together. Designs by committee usually look that way. You can allow a single person to create the architecture, but then not everybody will understand it (and follow it), and you are vulnerable to that person getting hit by a truck. Gather everyone together to work out the architecture (or some other strategic issue). Put them all in the same room (literally.) Every person must commit to total participation until the architecture is complete enough that a clear picture has emerged. There are two keys to this pattern. The first is that everyone must be physically together, in the spirit of FACE TO FACE BEFORE WORKING REMOTELY (5.1.10). This is necessary to ensure good communication at this critical time. Teleconferences are not sufficient @ 5 @ This pattern is superficially very similar to FACE TO FACE BEFORE WORKING REMOTELY (5.1.10), but they are essentially different, and both are vital. The purpose of FACE TO FACE BEFORE WORKING REMOTELY is the establishment of roles, allegiances, and building teams. The purpose of LOCK THEM UP TOGETHER is to hammer out technical issues. However, the two might happen at the same time. This pattern works best when UNITY OF PURPOSE (4.2.12) is in effect, although the LOCK THEM UP TOGETHER patern can help achieve UNITY OF PURPOSE. 
@Size The Schedule @Both overly ambitious schedules and overly generous schedules have their pains, either for the developers or the customers.  If you make the schedule too generous, developers become complacent, and you miss market windows. But if the schedule is too ambitious, developers become burned out, and you miss market windows. And if the schedule is too ambitious, product quality suffers, and compromised architectural principles establish a poor foundation for future maintenance  @ProjectManagementPatternLanguage @2 @Reward developers for negotiating a schedule they prove to meet,with financial bonuses (or at-risk compensation; see COMPENSATE SUCCESS (4.2.25)), or with extra time off. Keep two sets of schedules: one for the market, and one for the developers. @4 @Help delineate the schedule with NAMED STABLE BASES (4.1.4). Grow as needed with PHASING IT IN (4.2.3). Define initial targets with WORK QUEUE (4.1.13). Make sure SOMEONE ALWAYS MAKES PROGRESS (4.1.20).  The forces come from the MIT project management simulation and from stud es as projects such as Borland Quattro Pro for Windows. Another manager suggested that the skew between the internal and external schedules be closer to two months than two weeks because, if you slip, it usually reflects a major oversight that costs two or three months De Marco talks about rewarding people for accuracy of schedules; see [DeMarcoBoehm1986]. Verify this reference... Also, read about the place of promptness in [ZuckermanAndHatala1992]. You don’t need a full schedule—perhaps no schedule at all—to get started. See GET ON WITH IT (4.1.3) and BUILD PROTOTYPES

@Named Stable Bases @the project schedule has been laid out and development has started. It is important to integrate software frequently enough so that the base does not become stale, but not so frequently that you damage a shared understanding of what functionality is sound and trusted in an evolving software base. If you try continuous integration, developers struggle to follow a moving target and there is no shared sense of quanta of functionality at any given time, or quanta of progress from week to week. But if it’s too long between integrations, developers become blocked from making progress beyond the limits of the last base. So while stability is a good thing, the project must always make progress — and, more importantly, the stakeholders must perceive that progress is being made. @ProjectManagementPatternLanguage @1 @Stabilize system interfaces—the architecture—about once a week. Give the stable system a name of some kind by which developers can identify their shared understanding of that version’s functionality. The names need not be elaborate; they can simply be a load number. The names should, however, be easy to remember, to identify with the correct version of software, and to distinguish from each other. The idea is to provide some sort of handle that people can use to communicate about a stable base.  Other software can be changed (and even integrated) more frequently  @2 @A prototype can be an expedient for one of the NAMED STABLE BASES; see BUILD PROTOTYPES (4.1.7). The project has targets to shoot for and benchmarks whose accomplishments can be trumpeted to customers. This affects the Customer view of the process, and has strong ramifications for the Architect as well. The pattern was initially pointed out by Dennis DeBruler at AT&T. The main point of the pattern is that a project should schedule change introduction so the effects of changes can be anticipated. It isless important to publish the content of a change (which will go unheeded under high change volume) than for the development community to understand that change is taking place. It is important not to violate “the rule of least surprise.”  It can be helpful to have, simultaneously, various bases at different levels of stability. For example, one AT&T project had a nightly build (which is guaranteed only to have compiled), a weekly integration test build (which is guaranteed to have passed system-wide sanity tests), and a (roughly biweekly) service test build (that is considered stable enough for QA’s system test).  PROGRAMMING EPISODE (4.1.19) is an example of this pattern in the small. 